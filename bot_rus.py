"""
for explicit comments go to bot_letovo_edition.py
"""

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
import asyncio

import sqlite3

from datetime import datetime, timedelta

bot = Bot("YOUR API TOKEN HERE")
dp = Dispatcher()

ADMIN_IDS = [1793679875, 1667964657]
ADMIN_EMOJI = "üëÆ‚Äç‚ôÇÔ∏è"


class AdminForm(StatesGroup):
    broadcast = State()

@dp.message(lambda message: message.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    conn = sqlite3.connect("found_items.db")
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', 
                  (message.from_user.id,))
    conn.commit()
    conn.close()
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç Lost&Found.\n\n"
        "üîç –ï—Å–ª–∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–ª –≤–µ—â—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /lost\n"
        "üì¶ –ï—Å–ª–∏ –Ω–∞—à—ë–ª —á—É–∂—É—é –≤–µ—â—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /found\n\n"
        "‚ùóÔ∏è–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤ —á–∞—Ç–µ –µ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π, "
        "—Ç–∞–∫ —á—Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç –ø–∏—Å–∞—Ç—å –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ —Ç–µ–º–µ:)\n\n"
        "–£–∑–Ω–∞–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /help"
    )

    try:
        await message.answer(welcome_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        print(f"Failed to send welcome message: {e}")
        await message.answer(welcome_text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "/help")
async def help_command(message: Message):
    help_text = (
        "üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        
        "<b>1. /lost ‚Äî –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–µ—â–µ–π</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–∂–∏–Ω—Å—ã, –∫—É—Ä—Ç–∫–∏, –æ–±—É–≤—å –∏ –¥—Ä.)\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ (—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n"
        "‚Ä¢ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç—É\n\n"
        
        "<b>2. /found ‚Äî –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–µ—â–∏</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—é–∫–∑–∞–∫–∏, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, —É–∫—Ä–∞—à–µ–Ω–∏—è)\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –Ω–∞—Ö–æ–¥–∫–µ\n\n"
        
        "<b>3. /notification ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞—Ö–æ–¥–∫–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ üóëÔ∏è\n"
        "‚Ä¢ –ò–∑–º–µ–Ω—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
        
        "<b>üéØ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</b>\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ß–µ–º —Ç–æ—á–Ω–µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∞–º\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        
        "<b>‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç /lost", callback_data="help_lost"),
            InlineKeyboardButton(text="üì¶ /found", callback_data="help_found"),
            InlineKeyboardButton(text="üîî /notification", callback_data="help_notifications")
        ],
        [InlineKeyboardButton(text="üìö –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="all_commands")]
    ])
    
    try:
        await message.answer(help_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(help_text.replace("<b>","").replace("</b>",""), reply_markup=keyboard)

@dp.callback_query(lambda c: c.data in ["help_lost", "help_found", "help_notifications", "all_commands"])
async def handle_help_sections(callback: CallbackQuery):
    section = callback.data.split("_")[1]
    content = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"


    if section == "lost":
        content = (
            "üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /lost</b>\n\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lost\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7 –¥–Ω–µ–π)\n"
            "4. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "5. –ù–∞–∂–º–∏—Ç–µ üóëÔ∏è —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
            "üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
        )
    elif section == "found":
        content = (
            "üì¶ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /found</b>\n\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /found\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–µ—â–∏\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
            "4. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ\n"
            "üîî –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        )
    elif section == "notifications":
        content = (
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ö–æ–¥–∫–∞—Ö</b>\n\n"
            "1. –í–≤–µ–¥–∏—Ç–µ /notification\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'\n"
            "3. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫\n"
            "4. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –≤—ã–±–µ—Ä–∏—Ç–µ 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è' –∏ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            "üóëÔ∏è –ö–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É"
        )
    elif section == "commands":
        content = (
            "üìö <b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>\n\n"
            "üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "üîπ /help - –ü–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π\n"
            "üîπ /lost - –ù–∞–π—Ç–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é –≤–µ—â—å\n"
            "üîπ /found - –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–µ—â–∏\n"
            "üîπ /notification - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
            "üîê <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
            "üîπ /showall - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "üîπ /sendall - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
    try:
        await callback.message.edit_text(content, parse_mode=ParseMode.HTML)
        await callback.answer()
    except Exception as e:
        print(f"Error updating help text: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")


@dp.message(lambda message: message.text == "/showall")
async def cmd_showall(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect("found_items.db")
    cursor = conn.cursor()
    cursor.execute('SELECT message_id, category, date FROM found_items ORDER BY date DESC')
    
    results = cursor.fetchall()
    conn.close()
    
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î")
        return
    sent_messages = []
    for msg_id, category, date in results:
        try:
            temp_msg = await bot.forward_message(
                chat_id=message.chat.id,
                from_chat_id="@lost_and_found_helper",
                message_id=msg_id
            )
            
            caption = temp_msg.caption or ""
            
            location = "-"
            comments = "-"
            
            for line in caption.split("\n"):
                if line.startswith("–ú–µ—Å—Ç–æ:"):
                    location = line.replace("–ú–µ—Å—Ç–æ:", "").strip()
                elif line.startswith("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:"):
                    comments = line.replace("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:", "").strip()
            
            delete_kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î",
                    callback_data=f"admin_delete_{msg_id}"
                )
            ]])
            
            sent_msg = await message.answer_photo(
                photo=temp_msg.photo[-1].file_id if temp_msg.photo else None,
                caption=(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"–ú–µ—Å—Ç–æ: {location}\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}\n"
                    f"–î–∞—Ç–∞: {date}"
                ),
                reply_markup=delete_kb
            )
            
            sent_messages.append(sent_msg.message_id)
            
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=temp_msg.message_id
            )
            
        except Exception as e:
            print(f"Error showing message {msg_id}: {e}")
    
    cleanup_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üßπ Hide All",
            callback_data="admin_cleanup"
        )
    ]])

    end_list = await message.answer("–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞", reply_markup=cleanup_kb)
    await state.update_data(
        sent_messages=sent_messages,
        end_list_message=end_list.message_id,
    )
    

@dp.callback_query(lambda c: c.data.startswith("admin_delete_"))
async def handle_admin_delete(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("Unauthorized")
        return

    msg_id = callback.data.split("_")[2]

    try:
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('DELETE FROM found_items WHERE message_id = ?', (msg_id,))
        conn.commit()
        conn.close()

        try:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id
            )
        except Exception as e:
            print(f"Failed to delete admin message: {e}")

        success_msg = await callback.message.answer(
            f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î"
        )
        asyncio.create_task(delete_after_delay(
            chat_id=success_msg.chat.id,
            message_id=success_msg.message_id,
            delay=5
        ))

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        print(f"Error during admin deletion: {e}")

@dp.callback_query(lambda c: c.data == "admin_cleanup")
async def handle_admin_cleanup(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("Unauthorized")
        return
    
    try:
        data = await state.get_data()
        message_ids = data.get("sent_messages", [])
        hide_msg_id = data.get("end_list_message")

        for msg_id in message_ids:
            try:
                await bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=msg_id
                )
            except TelegramBadRequest as e:
                if "message to delete not found" in str(e):
                    print(f"Message {msg_id} already deleted")
                else:
                    print(f"Failed to delete message {msg_id}: {e}")

        if hide_msg_id:
            try:
                await bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=hide_msg_id
                )
            except Exception as e:
                print(f"Failed to delete hide button: {e}")
        
    except Exception as e:
        print(f"Cleanup error: {e}")
    
    await callback.answer("–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")

@dp.message(lambda message: message.text == "/sendall")
async def cmd_sendall(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    await state.set_state(AdminForm.broadcast)

@dp.message(AdminForm.broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    conn = sqlite3.connect("found_items.db")
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = [row[0] for row in cursor.fetchall()]
    conn.close()

    success = 0
    failed = 0

    admin_badge = f"{ADMIN_EMOJI} *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"

    if message.text:
        full_text = admin_badge + message.text
        for user_id in users:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=full_text,
                    parse_mode=ParseMode.MARKDOWN
                )
                success += 1
            except Exception:
                failed += 1

    elif message.photo:
        photo_file_id = message.photo[-1].file_id
        caption = message.caption or ""
        full_caption = admin_badge + caption

        for user_id in users:
            try:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo_file_id,
                    caption=full_caption,
                    parse_mode=ParseMode.MARKDOWN
                )
                success += 1
            except Exception:
                failed += 1

    else:
        await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await state.clear()
        return

    stats_text = (
        f"{ADMIN_EMOJI} Broadcast completed:\n"
        f"‚úÖ Successfully delivered: {success}\n"
        f"‚ùå Failed attempts: {failed}"
    )

    await message.answer(stats_text)
    await state.clear()


class LostForm(StatesGroup):
    photo = State()
    category = State()
    location = State()
    comments = State()

class EditingForm(StatesGroup):
    photo = State()
    category = State()
    location = State()
    comments = State()

class FilterForm(StatesGroup):
    category = State()
    days = State()

class SearchState(StatesGroup): 
    viewing = State()

CATEGORIES = {
    "pants": "üëñ –®—Ç–∞–Ω—ã",
    "jackets": "üß• –ö—É—Ä—Ç–∫–∏",
    "sweaters": "üß£ –ö–æ—Ñ—Ç—ã",
    "shoes": "üëü –û–±—É–≤—å",
    "bags": "üéí –°—É–º–∫–∏",
    "hats": "üé© –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
    "badges": "üéñÔ∏è –ë–µ–π–¥–∂–∏–∫–∏",
    "chargers_electronics": "üîå –ó–∞—Ä—è–¥–∫–∏",
    "electronics_devices": "üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
    "accessories": "üï∂Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    "sports_gear": "üéæ –°–ø–æ—Ä—Ç–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "money_cards": "üí∞ –î–µ–Ω—å–≥–∏ –∏ –∫–∞—Ä—Ç—ã",
    "other": "üì¶ –î—Ä—É–≥–æ–µ"
}

CATEGORY_DESCRIPTIONS = {
    "pants": "–¥–∂–∏–Ω—Å—ã / —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ / —à–æ—Ä—Ç—ã",
    "jackets": "",
    "sweaters": "—Ç–æ–ª—Å—Ç–æ–≤–∫–∏ / –∑–∏–ø–∫–∏ / —Ñ—É—Ç–±–æ–ª–∫–∏",
    "shoes": "—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è / –Ω–µ—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
    "bags": "",
    "hats": "—à–∞–ø–∫–∏ / –∫–µ–ø–∫–∏",
    "badges": "",
    "chargers_electronics": "",
    "electronics_devices": "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã / —Ç–µ–ª–µ—Ñ–æ–Ω—ã / –Ω–∞—É—à–Ω–∏–∫–∏",
    "accessories": "–æ—á–∫–∏, –∫–æ–ª—å—Ü–∞, —é–≤–µ–ª–∏—Ä–∫–∞ –∏ —Ç–¥",
    "sports_gear": "–º—è—á–∏, —Ä–∞–∫–µ—Ç–∫–∏, –≥–∞–Ω—Ç–µ–ª–∏ –∏ —Ç–¥",
    "money_cards": "",
    "other": ""
}

def init_db():
    conn = sqlite3.connect("found_items.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS found_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category TEXT NOT NULL,
            message_id TEXT NOT NULL,
            date DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_subscriptions (
            user_id INTEGER NOT NULL,
            category TEXT NOT NULL,
            PRIMARY KEY (user_id, category)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_seen DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()

@dp.callback_query(lambda c: c.data.startswith("notif_delete_"))
async def handle_notification_delete(callback: CallbackQuery):
    msg_id = int(callback.data.split("_")[-1])
    
    try:
        await bot.delete_message(callback.message.chat.id, msg_id)
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting notification: {e}")
    
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–µ–Ω–∏–µ —Å–ø—Ä—è—Ç–∞–Ω–æ.")


class NotificationForm(StatesGroup):
    action = State()
    subscribe = State()
    unsubscribe = State()

@dp.message(lambda message: message.text == "/notification")
async def cmd_notification(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="notify_subscribe")],
        [InlineKeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="notify_unsubscribe")]
    ])
    what_would_msg = await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    await state.update_data(what_would_message=what_would_msg.message_id)
    await state.update_data(notification_message=message)
    await state.set_state(NotificationForm.action)

@dp.callback_query(lambda c: c.data in ["notify_subscribe", "notify_unsubscribe"])
async def handle_notification_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    data = await state.get_data()
    what_would_msg_id = data.get("what_would_message")
    
    if what_would_msg_id:
        try:
            await bot.delete_message(
                chat_id=data.get("notification_message").chat.id,
                message_id=what_would_msg_id
            )
        except Exception as e:
            print(f"Failed to delete search prompt message: {e}")
    
    if action == "subscribe":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîç  –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                switch_inline_query_current_chat="NOTIFY_SUBSCRIBE: "
            )]
        ])
        search_prompt_msg = await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
        await state.update_data(search_prompt_message=search_prompt_msg.message_id)
        await state.set_state(NotificationForm.subscribe)
    else:
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT DISTINCT category FROM user_subscriptions
            WHERE user_id = ?
        ''', (callback.from_user.id,))
        
        subscriptions = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        if not subscriptions:
            await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            await state.clear()
            return
        
        buttons = []
        for i in range(0, len(subscriptions), 2):
            row = subscriptions[i:i+2]
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå {CATEGORIES[cat]}",
                    callback_data=f"unsub_{cat}"
                ) for cat in row
            ])
        
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –§–∏–Ω–∏—à", 
                callback_data="unsub_finish"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=keyboard)
        await state.set_state(NotificationForm.unsubscribe)

@dp.inline_query(lambda q: q.query.startswith("NOTIFY_SUBSCRIBE:"))
async def inline_subscription_query(inline_query: InlineQuery):
    query = inline_query.query.replace("NOTIFY_SUBSCRIBE:", "").strip().lower()
    results = []
    
    for key, title in CATEGORIES.items():
        if query in title.lower() or query in key.lower():
            description = CATEGORY_DESCRIPTIONS.get(key, "")
            results.append(InlineQueryResultArticle(
                id=key,
                title=title,
                input_message_content=InputTextMessageContent(
                    message_text=f"SELECTED_SUB:{key}"
                ),
                description=description
            ))
    
    await bot.answer_inline_query(inline_query.id, results, cache_time=1)

@dp.message(NotificationForm.subscribe, lambda m: m.text.startswith("SELECTED_SUB:"))
async def handle_subscription_selection(message: Message, state: FSMContext):
    raw = message.text.replace("SELECTED_SUB:", "").strip()
    category = CATEGORIES.get(raw, None)
    
    if not category:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    user_id = message.from_user.id
    
    try:
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO user_subscriptions (user_id, category)
            VALUES (?, ?)
        ''', (user_id, raw))
        conn.commit()
        conn.close()
        
        success_msg = await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {category} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")

        asyncio.create_task(delete_after_delay(
            chat_id=message.chat.id,
            message_id=success_msg.message_id,
            delay=15
        ))
    except Exception as e:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        print(f"Subscription error: {e}")

    try:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id
        )
    except Exception as e:
        print(f"Failed to delete SELECTED_SUB message: {e}")

    data = await state.get_data()
    search_prompt_msg_id = data.get("search_prompt_message")
    
    if search_prompt_msg_id:
        try:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=search_prompt_msg_id
            )
        except Exception as e:
            print(f"Failed to delete search prompt message: {e}")
    
    
    await state.clear()


@dp.callback_query(lambda c: c.data.startswith("unsub_"))
async def handle_unsubscribe(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_", 1)[1]
    
    if data == "finish":
        await callback.message.delete()
        success_msg = await callback.message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        asyncio.create_task(delete_after_delay(
            chat_id=success_msg.chat.id,
            message_id=success_msg.message_id,
            delay=15
        ))
        await state.clear()
        return
    
    category = data
    user_id = callback.from_user.id
    
    try:
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            DELETE FROM user_subscriptions
            WHERE user_id = ? AND category = ?
        ''', (user_id, category))
        conn.commit()
        conn.close()
        
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT DISTINCT category FROM user_subscriptions
            WHERE user_id = ?
        ''', (user_id,))
        
        subscriptions = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        buttons = []
        for i in range(0, len(subscriptions), 2):
            row = subscriptions[i:i+2]
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå {CATEGORIES[cat]}",
                    callback_data=f"unsub_{cat}"
                ) for cat in row
            ])
        
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –§–∏–Ω–∏—à", 
                callback_data="unsub_finish"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
        print(f"Unsubscription error: {e}")


def get_category_item_count(category_key):
    try:
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT COUNT(*) FROM found_items WHERE category = ?
        ''', (category_key,))
        count = cursor.fetchone()[0]
        conn.close()
        return count
    except Exception as e:
        print(f"Error getting category count: {e}")
        return 0


def get_message_ids_by_category_and_days(category, max_days_back):
    try:
        cutoff_date = (datetime.now() - timedelta(days=int(max_days_back))).date()
        
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT message_id 
            FROM found_items
            WHERE category = ?
              AND DATE(date) >= DATE(?)
            ORDER BY date DESC
        ''', (category, str(cutoff_date)))
        
        file_ids = [row[0] for row in cursor.fetchall()]
        conn.close()
        return file_ids
        
    except Exception as e:
        print(f"Error fetching filtered items: {e}")
        return []


@dp.message(lambda message: message.text == "/lost")
async def cmd_filter(message: Message, state: FSMContext):
    prompt_msg = await message.answer("üîç –ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å?")
    await state.update_data(last_bot_message=prompt_msg.message_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            switch_inline_query_current_chat=" "
        )]
    ])
    search_msg = await message.answer("–ù–∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.update_data(search_prompt_message=search_msg.message_id)
    await state.set_state(FilterForm.category)

@dp.message(FilterForm.category, lambda m: m.text.startswith("FILTER_CATEGORY:"))
async def handle_filter_category(message: Message, state: FSMContext):
    raw = message.text.replace("FILTER_CATEGORY:", "").strip()
    await state.update_data(filter_category=raw)
    
    data = await state.get_data()
    for msg_key in ['last_bot_message', 'search_prompt_message']:
        msg_id = data.get(msg_key)
        if msg_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                print(f"Failed to delete message {msg_key}: {e}")

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass
    
    days_msg = await message.answer("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è?")
    await state.update_data(days_message=days_msg.message_id)
    await state.set_state(FilterForm.days)

@dp.message(FilterForm.days)
async def handle_filter_days(message: Message, state: FSMContext):
    days = message.text.strip()
    data = await state.get_data()

    days_msg_id = data.get('days_message')
    if days_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=days_msg_id)
        except Exception:
            pass
    
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    category_key = data.get('filter_category', 'Unknown') 
    message_ids = get_message_ids_by_category_and_days(category_key, days)

    if not message_ids:
        await message.answer(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
        await state.clear()
        return

    sent_messages = []
    
    for msg_id in message_ids:
        try:
            sent_msg = await bot.forward_message(
                chat_id=message.chat.id,
                from_chat_id="@lost_and_found_helper",
                message_id=msg_id
            )
            sent_messages.append(sent_msg.message_id)
        except Exception as e:
            print(f"Error sending message {msg_id}: {e}")

    hide_orders_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –°–ø—Ä—è—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="hide_orders")]
    ])
    
    hide_msg = await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=hide_orders_button)
    
    await state.update_data(
        sent_messages=sent_messages,
        hide_button_message=hide_msg.message_id
    )
    await state.set_state(SearchState.viewing)

@dp.callback_query(lambda c: c.data == "hide_orders")
async def handle_hide_orders(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    result_ids = data.get('sent_messages', [])
    for msg_id in result_ids:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"Error deleting message {msg_id}: {e}")

    hide_msg_id = data.get('hide_button_message')
    if hide_msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=hide_msg_id)
        except Exception as e:
            print(f"Error deleting hide button: {e}")
    
    await state.clear()
    await callback.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø—Ä—è—Ç–∞–Ω—ã")

@dp.message(lambda message: message.text == "/found")
async def cmd_lost(message: Message, state: FSMContext):
    await state.set_state(LostForm.photo)
    msg = await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
    await state.update_data(last_bot_message=msg.message_id)

@dp.callback_query(lambda c: c.data == "makeOrder")
async def start_make_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(LostForm.photo)
    await callback.message.edit_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
    await state.update_data(last_bot_message=callback.message.message_id)

@dp.message(LostForm.photo)
async def receive_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ.")
        return

    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            switch_inline_query_current_chat=" "
        )]
    ])
    msg = await message.answer("–ù–∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.update_data(last_bot_message=msg.message_id)
    await state.set_state(LostForm.category)

@dp.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query = inline_query.query.strip().lower()
    results = []

    state: FSMContext = dp.fsm.get_context(bot, inline_query.from_user.id, inline_query.from_user.id)
    current_state = await state.get_state()
    
    is_filter_context = current_state == "FilterForm:category"

    for key, title in CATEGORIES.items():
        if is_filter_context:
            count = get_category_item_count(key)
            if count == 0:
                continue
            result = InlineQueryResultArticle(
                id=key,
                title=title,
                input_message_content=InputTextMessageContent(
                    message_text=f"FILTER_CATEGORY:{key}"
                ),
                description=f"{count} items"
            )
        else:
            description = CATEGORY_DESCRIPTIONS.get(key, "")
            result = InlineQueryResultArticle(
                id=key,
                title=title,
                input_message_content=InputTextMessageContent(
                    message_text=f"SELECTED_CATEGORY:{key}"
                ),
                description=description
            )
        full_text = (title + " " + result.description).lower()
        if query in full_text:
            results.append(result)

    await bot.answer_inline_query(inline_query.id, results, cache_time=1)

@dp.message(LostForm.category, lambda m: m.text.startswith("SELECTED_CATEGORY:"))
async def handle_category_selection(message: Message, state: FSMContext):
    raw = message.text.replace("SELECTED_CATEGORY:", "").strip()
    category_name = CATEGORIES.get(raw, "Unknown")

    await state.update_data(category=category_name)
    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    await show_summary(message, data, state)

async def show_summary(message: Message, data: dict, state: FSMContext):
    summary_msg_id = data.get('summary_message')
    buttons_msg_id = data.get('buttons_message')

    if summary_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=summary_msg_id)
        except Exception:
            pass

    if buttons_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=buttons_msg_id)
        except Exception:
            pass

    summary = (
        f"üìÑ <b>–¢–≤–æ—è —Ñ–æ—Ä–º–∞:</b>\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category', '-')}\n"
        f"<b>–ú–µ—Å—Ç–æ:</b> {data.get('location', '-')}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {data.get('comments', '-')}"
    )

    confirm_buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å & –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_submit")],
        [
            InlineKeyboardButton(
                text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –§–æ—Ç–æ" if data.get("photo") else "üì∏ –î–æ–±–∞–≤–∏—Ç—å –§–æ—Ç–æ",
                callback_data="edit_photo"
            ),
            InlineKeyboardButton(
                text="üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" if data.get("category") else "üîç –î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é",
                callback_data="edit_category"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ" if data.get("location") else "üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ",
                callback_data="edit_location"
            ),
            InlineKeyboardButton(
                text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" if data.get("comments") else "üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                callback_data="edit_comments"
            )
        ]
    ]

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=confirm_buttons)

    new_summary_msg = None
    if data.get("photo"):
        new_summary_msg = await message.answer_photo(photo=data["photo"], caption=summary, parse_mode=ParseMode.HTML)
    else:
        new_summary_msg = await message.answer(summary, parse_mode=ParseMode.HTML)

    new_buttons_msg = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=confirm_keyboard)

    await state.update_data(
        summary_message=new_summary_msg.message_id,
        buttons_message=new_buttons_msg.message_id
    )

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def handle_edit(callback: CallbackQuery, state: FSMContext):
    action = callback.data.replace("edit_", "")

    if action == "photo":
        msg = await callback.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.")
        await state.update_data(last_bot_message=msg.message_id)
        await state.set_state(EditingForm.photo)
    elif action == "category":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                switch_inline_query_current_chat=" "
            )]
        ])
        msg = await callback.message.answer("–ù–∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await state.update_data(last_bot_message=msg.message_id)
        await state.set_state(EditingForm.category)
    elif action == "location":
        msg = await callback.message.answer("–ì–¥–µ –±—ã–ª–æ –ø–æ—Ç–µ—Ä—è–Ω–æ? (–û—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
        await state.update_data(last_bot_message=msg.message_id)
        await state.set_state(EditingForm.location)
    elif action == "comments":
        msg = await callback.message.answer("–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: (–û—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
        await state.update_data(last_bot_message=msg.message_id)
        await state.set_state(EditingForm.comments)

    data = await state.get_data()
    summary_msg_id = data.get('summary_message')
    buttons_msg_id = data.get('buttons_message')

    if summary_msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=summary_msg_id)
        except Exception:
            pass

    if buttons_msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=buttons_msg_id)
        except Exception:
            pass

    await callback.answer()

@dp.message(EditingForm.photo)
async def update_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ.")
        return

    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    await show_summary(message, data, state)

@dp.message(EditingForm.category, lambda m: m.text.startswith("SELECTED_CATEGORY:"))
async def update_category(message: Message, state: FSMContext):
    raw = message.text.replace("SELECTED_CATEGORY:", "").strip()
    category_name = CATEGORIES.get(raw, "Unknown")
    await state.update_data(category=category_name)
    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    await show_summary(message, data, state)

@dp.message(EditingForm.location)
async def update_location(message: Message, state: FSMContext):
    if message.text.strip() == "-":
        await message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞.")
    else:
        await state.update_data(location=message.text)

    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    await show_summary(message, data, state)

@dp.message(EditingForm.comments)
async def update_comments(message: Message, state: FSMContext):
    if message.text.strip() == "-":
        await message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    else:
        await state.update_data(comments=message.text)

    data = await state.get_data()

    last_msg_id = data.get('last_bot_message')
    if last_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    await show_summary(message, data, state)

@dp.callback_query(lambda c: c.data == "confirm_submit")
async def confirm_submission(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_key = next(k for k, v in CATEGORIES.items() if v == data.get("category"))
    summary_for_lost = (
        f"–ú–µ—Å—Ç–æ: {data.get('location', '-')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comments', '-')}\n"
        f"–î–∞—Ç–∞: {datetime.now().date()}"
    )
    
    try:
        sent_msg = await bot.send_photo(
            chat_id="@lost_and_found_helper", 
            photo=data["photo"], 
            caption=summary_for_lost
        )
        
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO found_items (message_id, category, date)
            VALUES (?, ?, ?)
        ''', (sent_msg.message_id, category_key, datetime.now()))
        conn.commit()
        conn.close()
        
        conn = sqlite3.connect("found_items.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT DISTINCT user_id FROM user_subscriptions
            WHERE category = ?
        ''', (category_key,))
        
        subscribers = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        for user_id in subscribers:
            try:
                notification_msg = await bot.send_photo(
                    chat_id=user_id,
                    photo=data["photo"],
                    caption=f"üîî –ù–æ–≤–∞—è –≤–µ—â—å –Ω–∞–π–¥–µ–Ω–∞ –≤ {data.get('category')}:\n\n{summary_for_lost}"
                )
                
                delete_btn = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üóëÔ∏è –°–ø—Ä—è—Ç–∞—Ç—å",
                        callback_data=f"notif_delete_{notification_msg.message_id}"
                    )
                ]])
                
                await bot.send_message(
                    chat_id=user_id,
                    text="–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–∞–º–æ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30—Å",
                    reply_markup=delete_btn
                )

                
            except Exception as e:
                print(f"Failed to notify user {user_id}: {e}")
        
        
        success_msg = await callback.message.answer("‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        summary_msg_id = data.get('summary_message')
        buttons_msg_id = data.get('buttons_message')

        if summary_msg_id:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=summary_msg_id)
            except Exception as e:
                print(f"Failed to delete summary message: {e}")

        if buttons_msg_id:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=buttons_msg_id)
            except Exception as e:
                print(f"Failed to delete buttons message: {e}")

        asyncio.create_task(delete_after_delay(
            chat_id=callback.message.chat.id,
            message_id=success_msg.message_id,
            delay=15
        ))
        
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É")
        print(f"Submission error: {e}")
    
    await state.clear()
    await callback.answer()

async def delete_after_delay(chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"Failed to auto-delete message {message_id}: {e}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    init_db()
    asyncio.run(main())
